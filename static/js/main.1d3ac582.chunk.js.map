{"version":3,"sources":["SeasonsDisplay.js","Spinner.js","index.js"],"names":["SeasonConfig","summer","text","iconName","winter","SeasonsDisplay","props","lat","month","season","Date","getMonth","className","Spinner","message","defaultProps","App","state","errorMessage","window","navigator","geolocation","getCurrentPosition","data","setState","coords","latitude","err","this","renderContent","React","Component","ReactDOM","render","document","querySelector"],"mappings":"sMAGMA,G,MAAa,CACfC,OAAO,CACHC,KAAK,wBACLC,SAAS,OAEbC,OAAO,CACHF,KAAK,sBACLC,SAAS,eA2BFE,EAbQ,SAACC,GACpB,IAXeC,EAAKC,EAWdC,GAXSF,EAWUD,EAAMC,KAXXC,GAWe,IAAIE,MAAOC,UAVnC,GAAKH,EAAQ,EACbD,EAAM,EAAE,SAAS,SAGjBA,EAAI,EAAE,SAAS,UAKI,EAENP,EAAaS,GAA9BP,EAFuB,EAEvBA,KAAKC,EAFkB,EAElBA,SAEZ,OACA,yBAAKS,UAAS,yBAAoBH,IAC9B,uBAAGG,UAAS,oBAAeT,EAAf,mBACZ,4BAAKD,GACL,uBAAGU,UAAS,qBAAgBT,EAAhB,qBC9BdU,EAAU,SAAAP,GACZ,OACA,yBAAKM,UAAU,oBACX,yBAAKA,UAAU,sBAAsBN,EAAMQ,WAMnDD,EAAQE,aAAe,CACnBD,QAAQ,eAGGD,QCVTG,E,2MAEEC,MAAO,CACHV,IAAK,KAAMW,aAAc,I,mFAGb,IAAD,OACfC,OAAOC,UAAUC,YAAYC,oBACzB,SAACC,GAAD,OAAU,EAAKC,SAAS,CAACjB,IAAKgB,EAAKE,OAAOC,cAC1C,SAACC,GAAD,OAAS,EAAKH,SAAS,CAACN,aAAcS,EAAIb,e,sCAM9C,OAAGc,KAAKX,MAAMV,MAAQqB,KAAKX,MAAMC,aACtB,kBAAC,EAAD,CAAgBX,IAAKqB,KAAKX,MAAMV,OAEtCqB,KAAKX,MAAMV,KAAOqB,KAAKX,MAAMC,aACtB,yBAAKN,UAAU,MAAf,UAA4BgB,KAAKX,MAAMC,cAE3C,kBAAC,EAAD,CAASJ,QAAQ,0C,+BAKzB,OAAO,6BAAMc,KAAKC,qB,GA1BRC,IAAMC,WA+BxBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,cAAc,W","file":"static/js/main.1d3ac582.chunk.js","sourcesContent":["import React from 'react';\r\nimport './SeasonsDisplay.css';\r\n\r\nconst SeasonConfig={\r\n    summer:{\r\n        text:\"Let's hit the beach!!\",\r\n        iconName:'sun'\r\n    },\r\n    winter:{\r\n        text:\"Burr, It's chilly!!\",\r\n        iconName:'snowflake'\r\n    }\r\n};\r\n\r\nconst getSeason = (lat, month) => {\r\n    if(month > 2 && month < 8){\r\n        return lat > 0?'summer':'winter';\r\n    }\r\n    else{\r\n        return lat>0?'winter':'summer';\r\n    }\r\n    \r\n};\r\n\r\nconst SeasonsDisplay = (props) => {\r\n    const season = getSeason(props.lat,new Date().getMonth);\r\n    const {text,iconName} = SeasonConfig[season];\r\n\r\n    return (\r\n    <div className={`season-display ${season}`}>\r\n        <i className={`icon-left ${iconName} icon massive`} />\r\n        <h1>{text}</h1>\r\n        <i className={`icon-right ${iconName} icon massive`} />\r\n    </div>\r\n    );\r\n};\r\n\r\nexport default SeasonsDisplay;","import React from 'react';\r\n\r\nconst Spinner = props => {\r\n    return (\r\n    <div className=\"ui active dimmer\">\r\n        <div className=\"ui big text loader\">{props.message}</div>\r\n    </div>\r\n    );\r\n};\r\n\r\n\r\nSpinner.defaultProps = {\r\n    message:\"Loading..!!\"\r\n};\r\n\r\nexport default Spinner;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport SeasonsDisplay from './SeasonsDisplay';\r\nimport Spinner from './Spinner';\r\n\r\nclass App extends React.Component\r\n{\r\n        state= {\r\n            lat: null, errorMessage: ''\r\n        };\r\n\r\n    componentDidMount(){\r\n        window.navigator.geolocation.getCurrentPosition(\r\n            (data) => this.setState({lat: data.coords.latitude}),\r\n            (err) => this.setState({errorMessage: err.message})\r\n        );\r\n    }\r\n\r\n    renderContent(){\r\n        //conditional rendering\r\n        if(this.state.lat && !this.state.errorMessage){\r\n            return <SeasonsDisplay lat={this.state.lat}/>\r\n         }\r\n         if(!this.state.lat && this.state.errorMessage){\r\n             return <div className=\"ui\">Error: {this.state.errorMessage}</div>\r\n         }\r\n         return <Spinner message=\"Please approve the Location request\"/>;\r\n }\r\n    \r\n    \r\n    render(){\r\n        return <div>{this.renderContent()}</div>;\r\n    \r\n    }\r\n}\r\n//rendering the JSX code to html template\r\nReactDOM.render(<App />, document.querySelector('#root'));"],"sourceRoot":""}